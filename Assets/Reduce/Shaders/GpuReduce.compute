#include "../../Shaders/Math.compute"

#pragma kernel CSReduce

#define BLOCK_AMOUNT      8
#define BLOCK_DIMEN       uint3(BLOCK_AMOUNT, BLOCK_AMOUNT, BLOCK_AMOUNT)
#define BLOCK_SIZE        (BLOCK_AMOUNT * BLOCK_AMOUNT * BLOCK_AMOUNT)  

uint3           g_gridDimen;
uint            g_size;

Buffer<int>     g_in;
RWBuffer<int>   g_out;

groupshared int g_sharedData[BLOCK_SIZE];

[numthreads(BLOCK_DIMEN.x, BLOCK_DIMEN.y, BLOCK_DIMEN.z)]
void CSReduce( uint3 Gid  : SV_GroupID, 
               uint3 DTid : SV_DispatchThreadID, 
               uint3 GTid : SV_GroupThreadID,
               uint  GI   : SV_GroupIndex )
{
    uint tid = to1D(GTid, BLOCK_DIMEN);
    uint gid = to1D(Gid, g_gridDimen);
    uint globalId = tid + gid * BLOCK_SIZE;
    if (globalId < g_size) 
        g_sharedData[tid] = g_in[globalId];
    GroupMemoryBarrierWithGroupSync();
    
    for (uint s = (min(BLOCK_SIZE, g_size) >> 1); s > 0; s >>= 1) {
        uint nextTid = (tid + s);
        if (tid < s && nextTid < g_size) 
            g_sharedData[tid] += g_sharedData[nextTid];
        
        GroupMemoryBarrierWithGroupSync();
    }

    if (tid == 0) g_out[gid] = g_sharedData[0];
}
